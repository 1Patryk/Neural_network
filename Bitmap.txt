#include <stdio.h>
#include <stdlib.h>
#include <iostream>

struct BITMAP_header
{
	char name[2];
	unsigned int size;
	int garbage;
	unsigned int image_offset;
};

struct DIB_header
{
	unsigned int header_size;
	unsigned int width;
	unsigned int height;
	unsigned short int colorplanes;
	unsigned short int bitsperpixels;
	unsigned int compression;
	unsigned int image_size;
	unsigned int temp[4];
};

struct RGB
{
	unsigned char blue;
	unsigned char green;
	unsigned char red;
	unsigned char white;
};

struct Image
{
	int height;
	int width;
	struct RGB** rgb;		// why ** ?
};

struct Image readImage(FILE* fp, int height, int width)
{
	struct Image pic;
	int i = 0;
	pic.rgb = new struct RGB* [height * sizeof(void*)];
	pic.height = height;
	pic.width = width;

	for (i = height - 1; i >= 0; i--)
	{
		pic.rgb[i] = new struct RGB [width * sizeof(struct RGB)];
		fread(pic.rgb[i], width, sizeof(struct RGB), fp);
	}

	return pic;
}

void freeImage(struct Image pic)
{
	/*
	int i = 0;
	for (i = pic.height - 1; i >= 0; i--)
	{
		delete pic.rgb[i];
		delete pic.rgb;
	}
	*/
	delete pic.rgb;
}

unsigned char grayscale(struct RGB rgb)
{
	return ((0.3 * rgb.red) + (0.6 * rgb.green) + (0.1 * rgb.blue)) / 3;
}

void RGBImageToGrayscale(struct Image pic)
{
	int i, j = 0;
	for (i = 0; i < pic.height; i++)
	{
		for (j = 0; j < pic.width; j++)
		{
			pic.rgb[i][j].red = pic.rgb[i][j].green =
				pic.rgb[i][j].blue = pic.rgb[i][j].white =
				grayscale(pic.rgb[i][j]);

		}
	}

}

int createBWImage(struct BITMAP_header header, struct DIB_header dibheader,
	struct Image pic, const char* filew_name)
{
	FILE* fpw = new FILE;
	if (NULL)
	{
		return 1;
	}

	fopen_s(&fpw, filew_name, "w");			// open file

	//RGBImageToGrayscale(pic);

	int i = 0;

	std::cout << "CREATE BMP: " << std::endl;
	std::cout << "First two characters: " << header.name[0] << header.name[1] << std::endl;
	std::cout << "Size BMP file: " << header.size << " bytes." << std::endl;
	std::cout << "Offset: " << header.image_offset << std::endl;

	fwrite(header.name, 2, 1, fpw);
	fwrite(&header.size, 3 * sizeof(int), 1, fpw);
	fwrite(&dibheader, sizeof(struct DIB_header), 1, fpw);

	std::cout << "CHECK1" << std::endl;

	for (i = (pic.height - 1); i >= 0; i--)
	{
		std::cout << "CHECK2" << std::endl;
		fwrite(pic.rgb[i], pic.width, sizeof(struct RGB), fpw);
	}
	std::cout << "CHECK3" << std::endl;
	fclose(fpw);

	return 0;
}

bool openbmpfile(const char* fileo_name)
{
	FILE* fp = new FILE;
	if (NULL)
	{
		return false;
	}

	fopen_s(&fp, fileo_name, "rb");			// open file
	struct BITMAP_header header {0};		// create struct
	struct DIB_header dibheader {0};		// create struct

	fread(header.name, 2, 1, fp);
	std::cout << "First two characters: " << header.name[0] << header.name[1] << std::endl;
	if ((header.name[0] != 'B') || (header.name[1] != 'M'))
	{
		std::cout << "It's not 'BM' file!" << std::endl;
		return false;
	}

	fread(&header.size, 3 * sizeof(int), 1, fp);
	std::cout << "Size BMP file: " << header.size << " bytes." << std::endl;
	std::cout << "Offset: " << header.image_offset << std::endl;

	fread(&dibheader.header_size, sizeof(struct DIB_header), 1, fp);
	std::cout << "Header size: " << dibheader.header_size << " bytes." << std::endl;
	std::cout << "Width image: " << dibheader.width << " pixels." << std::endl;
	std::cout << "Height image: " << dibheader.height << " pixels." << std::endl;
	std::cout << "Colorplanes: " << dibheader.colorplanes << std::endl;
	std::cout << "Bits per pixels: " << dibheader.bitsperpixels << std::endl;
	std::cout << "Compression method: " << dibheader.compression << std::endl;
	std::cout << "Image size: " << dibheader.image_size << std::endl;

	if ((dibheader.header_size != 40) || (dibheader.compression != 0)
		|| (dibheader.bitsperpixels != 32))
	{
		std::cout << "Invalid parameter's!" << std::endl;
		return false;
	}

	fseek(fp, header.image_offset, SEEK_SET);	// Set stream of data in point 'image offset'

	struct Image image = readImage(fp, dibheader.height, dibheader.width);

	createBWImage(header, dibheader, image, "new.bmp");

	fclose(fp);
	freeImage(image);

	return true;
}

int main()
{
	std::cout << "Sizeof int: " << sizeof(int) << std::endl;
	std::cout << "Sizeof DIB_header: " << sizeof(struct DIB_header) << std::endl;
	if (!openbmpfile("sas.bmp"))		// sas.bmp
	{
		printf("Failed to open file");
	}
}
